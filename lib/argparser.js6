import {parse} from "cltags";
import {writeFile, exists, stat, open, read, close} from "fs";
var shell = require("shelljs");

let defaults = {
    major:-1,
    minor:-1,
    patch:-1,
    repository: "",
    remote: "origin",
    branch: "master"
};
let replacements = {
    "M":"major",
    "m":"minor",
    "p":"patch",
    "P":"patch",
    "r":"repository",
    "R":"repository",
    "user":"username",
    "u":"username",
    "pass":"password"
};

export var parseArgs = (args, done) => {
    var targs = ["bogus"].concat(args);
    var results = parse(targs, defaults, replacements);
    return done(results);
};

export var saveFile = (data, filename, done) => {
    writeFile(filename, JSON.stringify(data), (err) => {
        if (err) {
            return done(false);
        }
	return done(true);
    });
};

export var loadFile = (filename, done) => {
    
    exists(filename, (exists) => {
    if (exists) {
        stat(filename, (error, stats) => {
            open(filename, "r", (error, fd) => {
                var buffer = new Buffer(stats.size);
	read(fd, buffer, 0, buffer.length, null, (error, bytesRead, buffer) => {
            var data = buffer.toString("utf8", 0, buffer.length);
            close(fd);
	    console.log(`data: ${JSON.stringify(data)}`);
	    return done(JSON.parse(data));
		    
                });
            });
        });
    }
    });
};

export var bumpVersion = (data, newversion, done) => {

    var results = data.version.split(".");
    if (newversion.major >= 0)
	results[0] = newversion.major;
    if (newversion.minor >= 0)
	results[1] = newversion.minor;
    if (newversion.patch >= 0)
	results[2] = newversion.patch;
    if (newversion.patch == -1)
	results[2] = +results[2]+1;
    data.version = `${results[0]}.${results[1]}.${results[2]}`;
    console.log(`DataVersion:: ${data.version}`);
    return done(data);
};

export var commitToLocalGit = (message, done) => {
    let command = `git commit -a -m "ESBump commit: ${message}"`;
	if (shell.exec(command).code !== 0) {
	    shell.echo('Error: Git commit failed');
	    shell.exit(1);
	    return done(false);
	}
 	return done(true);
};

export var addGitTag = (version, message, done) => {
    let command = `git tag -a v${version} -m "${message}"`;
    console.log(shell.exec(command).output);
    return done(`v${version}`);
};

export var pushToRemote = (remote = 'origin', user, pass, done) => {
  
    let command = `git push origin --tags`;
	if (shell.exec(command).code !== 0) {
	    shell.echo('Error: Git commit failed');
	    shell.exit(1);
	    return done(false);
	}
 	return done(true);
};
